// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: type.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createType = `-- name: CreateType :one
INSERT INTO "Type" (
  name
) VALUES (
  $1
) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateType(ctx context.Context, name string) (Type, error) {
	row := q.db.QueryRowContext(ctx, createType, name)
	var i Type
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteType = `-- name: DeleteType :exec
DELETE FROM "Type"
WHERE id = $1
`

func (q *Queries) DeleteType(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteType, id)
	return err
}

const getType = `-- name: GetType :one
SELECT id, name, created_at, updated_at
FROM "Type"
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetType(ctx context.Context, id uuid.UUID) (Type, error) {
	row := q.db.QueryRowContext(ctx, getType, id)
	var i Type
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTypes = `-- name: ListTypes :many
SELECT id, name, created_at, updated_at
FROM "Type"
`

func (q *Queries) ListTypes(ctx context.Context) ([]Type, error) {
	rows, err := q.db.QueryContext(ctx, listTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Type{}
	for rows.Next() {
		var i Type
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateType = `-- name: UpdateType :one
UPDATE "Type"
SET
  name = COALESCE($1, name),
  updated_at = NOW()
WHERE
  id = $2
RETURNING id, name, created_at, updated_at
`

type UpdateTypeParams struct {
	Name sql.NullString `json:"name"`
	ID   uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateType(ctx context.Context, arg UpdateTypeParams) (Type, error) {
	row := q.db.QueryRowContext(ctx, updateType, arg.Name, arg.ID)
	var i Type
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
