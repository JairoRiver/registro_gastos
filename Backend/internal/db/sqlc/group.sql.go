// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: group.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO "Groups" (
  user_id,
  name
) VALUES (
  $1, $2
) RETURNING id, user_id, name, created_at, updated_at
`

type CreateGroupParams struct {
	UserID uuid.UUID `json:"user_id"`
	Name   string    `json:"name"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.UserID, arg.Name)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM "Groups"
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT id, user_id, name, created_at, updated_at
FROM "Groups" AS g
WHERE g.id = $1 
LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGroupsByUser = `-- name: ListGroupsByUser :many
SELECT id, user_id, name, created_at, updated_at
FROM "Groups" as g
WHERE user_id = $1
`

func (q *Queries) ListGroupsByUser(ctx context.Context, userID uuid.UUID) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, listGroupsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroups = `-- name: UpdateGroups :one
UPDATE "Groups"
SET
  name = COALESCE($1, name),
  updated_at = NOW()
WHERE
  id = $2
RETURNING id, user_id, name, created_at, updated_at
`

type UpdateGroupsParams struct {
	Name sql.NullString `json:"name"`
	ID   uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateGroups(ctx context.Context, arg UpdateGroupsParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, updateGroups, arg.Name, arg.ID)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
