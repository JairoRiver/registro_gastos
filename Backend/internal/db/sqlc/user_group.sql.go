// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user_group.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUserGroup = `-- name: CreateUserGroup :one
INSERT INTO user_group (
  user_id,
  group_id
) VALUES (
  $1, $2
) RETURNING id, user_id, group_id, created_at, updated_at
`

type CreateUserGroupParams struct {
	UserID  uuid.NullUUID `json:"user_id"`
	GroupID uuid.NullUUID `json:"group_id"`
}

func (q *Queries) CreateUserGroup(ctx context.Context, arg CreateUserGroupParams) (UserGroup, error) {
	row := q.db.QueryRowContext(ctx, createUserGroup, arg.UserID, arg.GroupID)
	var i UserGroup
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserGroup = `-- name: DeleteUserGroup :exec
DELETE FROM user_group
WHERE id = $1
`

func (q *Queries) DeleteUserGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserGroup, id)
	return err
}

const getUserGroup = `-- name: GetUserGroup :one
SELECT id, user_id, group_id, created_at, updated_at
FROM user_group
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetUserGroup(ctx context.Context, id uuid.UUID) (UserGroup, error) {
	row := q.db.QueryRowContext(ctx, getUserGroup, id)
	var i UserGroup
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserGroupByGroup = `-- name: GetUserGroupByGroup :one
SELECT id, user_id, group_id, created_at, updated_at
FROM user_group
WHERE group_id = $1 
LIMIT 1
`

func (q *Queries) GetUserGroupByGroup(ctx context.Context, groupID uuid.NullUUID) (UserGroup, error) {
	row := q.db.QueryRowContext(ctx, getUserGroupByGroup, groupID)
	var i UserGroup
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserGroupByUser = `-- name: GetUserGroupByUser :one
SELECT id, user_id, group_id, created_at, updated_at
FROM user_group
WHERE user_id = $1 
LIMIT 1
`

func (q *Queries) GetUserGroupByUser(ctx context.Context, userID uuid.NullUUID) (UserGroup, error) {
	row := q.db.QueryRowContext(ctx, getUserGroupByUser, userID)
	var i UserGroup
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserGroups = `-- name: ListUserGroups :many
SELECT id, user_id, group_id, created_at, updated_at
FROM user_group
LIMIT $1
OFFSET $2
`

type ListUserGroupsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserGroups(ctx context.Context, arg ListUserGroupsParams) ([]UserGroup, error) {
	rows, err := q.db.QueryContext(ctx, listUserGroups, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserGroup{}
	for rows.Next() {
		var i UserGroup
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GroupID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserGroup = `-- name: UpdateUserGroup :one
UPDATE user_group
SET
  user_id = COALESCE($1, user_id),
  group_id = COALESCE($2, group_id),
  updated_at = NOW()
WHERE
  id = $3
RETURNING id, user_id, group_id, created_at, updated_at
`

type UpdateUserGroupParams struct {
	UserID  uuid.NullUUID `json:"user_id"`
	GroupID uuid.NullUUID `json:"group_id"`
	ID      uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateUserGroup(ctx context.Context, arg UpdateUserGroupParams) (UserGroup, error) {
	row := q.db.QueryRowContext(ctx, updateUserGroup, arg.UserID, arg.GroupID, arg.ID)
	var i UserGroup
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
